name: Build and Release Windows App

permissions:
  contents: write
on:
  push:
    tags:
      - 'v*'  
  workflow_dispatch:
    inputs:
      os_choice:
        description: 'Choose OS to build for'
        required: true
        default: 'macos-latest'
        type: choice
        options:
          - 'windows-latest'
          - 'macos-latest'
          - 'macos-13'

jobs:
  build:
    runs-on: ${{ github.event.inputs.os_choice || 'macos-latest' }}

    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - run: yarn install

      - name: Extract version on Windows
        if: runner.os == 'Windows'
        run: |
          chcp 65001
          $PACKAGE_VERSION = (Get-Content -Raw ./package.json | ConvertFrom-Json).version
          echo "VERSION=$PACKAGE_VERSION" >> $env:GITHUB_ENV

      - name: Extract version on Unix
        if: runner.os != 'Windows'
        run: |
          VERSION=$(jq -r '.version' './package.json')
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Build Electron App
        run: yarn build --publish always
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Create GitHub Release (Windows)
        if: runner.os == 'Windows'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.VERSION }}
          name: Release v${{ env.VERSION }}
          files: |
            dist/*.exe
            dist/*.yml
            dist/*.blockmap
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release (macOS)
        if: runner.os == 'macOS'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.VERSION }}
          name: Release v${{ env.VERSION }}
          files: |
            dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
